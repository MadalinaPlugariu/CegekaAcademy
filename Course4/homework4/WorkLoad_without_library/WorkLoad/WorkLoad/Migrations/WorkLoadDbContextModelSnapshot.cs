// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkLoad.Data;

namespace WorkLoad.Migrations
{
    [DbContext(typeof(WorkLoadDbContext))]
    partial class WorkLoadDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FreelancerProject", b =>
                {
                    b.Property<int>("FreelancersId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.HasKey("FreelancersId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("FreelancerProject");
                });

            modelBuilder.Entity("WorkLoad.Entities.AddressFreelancer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Zipcode")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId")
                        .IsUnique();

                    b.ToTable("AddressFreelancer");
                });

            modelBuilder.Entity("WorkLoad.Entities.AddressProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Zipcode")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("AddressProject");
                });

            modelBuilder.Entity("WorkLoad.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("WorkLoad.Entities.Freelancer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FreelancerInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Freelancer");
                });

            modelBuilder.Entity("WorkLoad.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("EstimationDays")
                        .HasColumnType("int");

                    b.Property<string>("ProjectInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("WorkLoad.Entities.Workday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<double>("Hours")
                        .HasColumnType("float");

                    b.Property<int?>("IdFreelancer")
                        .HasColumnType("int");

                    b.Property<int?>("IdProject")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Workdays")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Workday");
                });

            modelBuilder.Entity("FreelancerProject", b =>
                {
                    b.HasOne("WorkLoad.Entities.Freelancer", null)
                        .WithMany()
                        .HasForeignKey("FreelancersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkLoad.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkLoad.Entities.AddressFreelancer", b =>
                {
                    b.HasOne("WorkLoad.Entities.Freelancer", "Freelancer")
                        .WithOne("AddressFreelancer")
                        .HasForeignKey("WorkLoad.Entities.AddressFreelancer", "FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("WorkLoad.Entities.AddressProject", b =>
                {
                    b.HasOne("WorkLoad.Entities.Customer", "Customer")
                        .WithOne("AddressPorject")
                        .HasForeignKey("WorkLoad.Entities.AddressProject", "CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkLoad.Entities.Project", "Project")
                        .WithOne("AddressProject")
                        .HasForeignKey("WorkLoad.Entities.AddressProject", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WorkLoad.Entities.Project", b =>
                {
                    b.HasOne("WorkLoad.Entities.Customer", "Customer")
                        .WithMany("Project")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WorkLoad.Entities.Workday", b =>
                {
                    b.HasOne("WorkLoad.Entities.Freelancer", "Freelancer")
                        .WithMany("Workdays")
                        .HasForeignKey("FreelancerId");

                    b.HasOne("WorkLoad.Entities.Project", "Project")
                        .WithMany("Workdays")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Freelancer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WorkLoad.Entities.Customer", b =>
                {
                    b.Navigation("AddressPorject");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WorkLoad.Entities.Freelancer", b =>
                {
                    b.Navigation("AddressFreelancer");

                    b.Navigation("Workdays");
                });

            modelBuilder.Entity("WorkLoad.Entities.Project", b =>
                {
                    b.Navigation("AddressProject");

                    b.Navigation("Workdays");
                });
#pragma warning restore 612, 618
        }
    }
}
