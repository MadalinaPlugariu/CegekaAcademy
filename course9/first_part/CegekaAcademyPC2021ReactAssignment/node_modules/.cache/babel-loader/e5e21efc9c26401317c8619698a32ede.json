{"ast":null,"code":"var _jsxFileName = \"F:\\\\Cegeka\\\\CegekaAcademy_local\\\\c9\\\\local\\\\CegekaAcademyPC2021ReactAssignment\\\\src\\\\components\\\\Photo\\\\PhotoForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Modal, Form, Button, Icon, Message } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PhotoForm = props => {\n  _s();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const emptyPhoto = {\n    id: '',\n    description: '',\n    title: '',\n    url: ''\n  };\n  const [photo, setPhoto] = useState(emptyPhoto);\n\n  const handleInputChange = (name, value) => {\n    const updatedPhoto = { ...photo,\n      [name]: value\n    };\n    setPhoto(updatedPhoto);\n  };\n\n  const isFormValid = () => {\n    if (!photo) return false;else if (!photo.title) return false;else if (!photo.description) return false;else if (!photo.url) return false;\n    return true;\n  };\n\n  const handleSubmit = event => {\n    if (!isFormValid()) {\n      setIsError(true);\n      return;\n    }\n\n    setIsError(false);\n    const {\n      editPhoto,\n      createPhoto,\n      index\n    } = props;\n\n    if (isNewForm()) {\n      createPhoto(photo);\n    } else {\n      editPhoto(index, photo);\n    }\n\n    closeForm();\n  };\n\n  const showForm = () => {\n    const {\n      photoProp\n    } = props;\n    setIsModalOpen(true);\n    setPhoto(photoProp || emptyPhoto);\n  };\n\n  const closeForm = () => setIsModalOpen(false);\n\n  const isNewForm = () => props.formType === 'New';\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    trigger: /*#__PURE__*/_jsxDEV(Button, {\n      icon: true,\n      onClick: showForm,\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        name: isNewForm() ? 'plus' : 'edit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this),\n    closeIcon: true,\n    open: isModalOpen,\n    onClose: closeForm,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      children: isNewForm() ? 'Add Photo' : `Edit: ${photo.title}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        error: isError,\n        children: [/*#__PURE__*/_jsxDEV(Message, {\n          error: true,\n          content: \"Fill out all fields and try again...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n          name: \"title\",\n          label: \"Title\",\n          placeholder: \"Photo title\",\n          defaultValue: isNewForm() ? '' : photo.title,\n          onChange: e => handleInputChange(e.target.name, e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n          name: \"description\",\n          label: \"Description\",\n          placeholder: \"Tell more about the photo...\",\n          defaultValue: isNewForm() ? '' : photo.description,\n          onChange: e => handleInputChange(e.target.name, e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n          name: \"url\",\n          label: \"URL\",\n          placeholder: \"URL of the photo\",\n          defaultValue: isNewForm() ? '' : photo.url,\n          onChange: e => handleInputChange(e.target.name, e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        positive: true,\n        icon: \"save\",\n        content: \"Save\",\n        onClick: e => {\n          handleSubmit(e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PhotoForm, \"mTEu+RCufE3o6uiN8jLG74Ha5B8=\");\n\n_c = PhotoForm;\nexport default PhotoForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhotoForm\");","map":{"version":3,"sources":["F:/Cegeka/CegekaAcademy_local/c9/local/CegekaAcademyPC2021ReactAssignment/src/components/Photo/PhotoForm.tsx"],"names":["React","useState","Modal","Form","Button","Icon","Message","PhotoForm","props","isModalOpen","setIsModalOpen","isError","setIsError","emptyPhoto","id","description","title","url","photo","setPhoto","handleInputChange","name","value","updatedPhoto","isFormValid","handleSubmit","event","editPhoto","createPhoto","index","isNewForm","closeForm","showForm","photoProp","formType","e","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { PhotoModel } from '../../models/PhotoModel';\r\nimport { Modal, Form, Button, Icon, Message } from 'semantic-ui-react';\r\n\r\ninterface PhotoFormProps {\r\n    formType: 'New' | 'Edit';\r\n    index: string;\r\n    photoProp?: PhotoModel;\r\n    editPhoto: Function;\r\n    createPhoto: Function;\r\n}\r\n\r\nconst PhotoForm = (props: PhotoFormProps) => {\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n    const emptyPhoto: PhotoModel = {\r\n        id: '',\r\n        description: '',\r\n        title: '',\r\n        url: ''\r\n    }\r\n\r\n    const [photo, setPhoto] = useState<PhotoModel>(emptyPhoto);\r\n\r\n    const handleInputChange = (name: string, value: string | string[] | any) => {\r\n        const updatedPhoto = {\r\n            ...photo,\r\n            [name]: value\r\n        }\r\n        setPhoto(updatedPhoto);\r\n    }\r\n\r\n    const isFormValid = () => {\r\n        if (!photo) return false;\r\n        else if (!photo.title) return false;\r\n        else if (!photo.description) return false;\r\n        else if (!photo.url) return false;\r\n    \r\n        return true;\r\n    }\r\n\r\n    const handleSubmit = (event: any) => {\r\n        if (!isFormValid()) {\r\n          setIsError(true);\r\n          return;\r\n        }\r\n        setIsError(false);\r\n    \r\n        const { editPhoto, createPhoto, index } = props;\r\n    \r\n        if (isNewForm()) {\r\n            createPhoto(photo);\r\n        } else {\r\n            editPhoto(index, photo);\r\n        }\r\n        closeForm();\r\n      }\r\n\r\n    const showForm = () => {\r\n        const { photoProp } = props;\r\n        setIsModalOpen(true);\r\n        setPhoto(photoProp || emptyPhoto);\r\n    }\r\n\r\n    const closeForm = () => setIsModalOpen(false);\r\n    const isNewForm = () => props.formType === 'New';\r\n\r\n    return (\r\n        <Modal\r\n          trigger={\r\n            <Button icon onClick={showForm}>\r\n              <Icon name={isNewForm() ? 'plus' : 'edit'} />\r\n            </Button>\r\n          }\r\n          closeIcon\r\n          open={isModalOpen}\r\n          onClose={closeForm}\r\n        >\r\n          <Modal.Header>{isNewForm() ? 'Add Photo' : `Edit: ${photo.title}`}</Modal.Header>\r\n          <Modal.Content>\r\n            <Form error={isError}>\r\n              <Message\r\n                error\r\n                content='Fill out all fields and try again...'\r\n              />\r\n              <Form.Input\r\n                name=\"title\"\r\n                label=\"Title\"\r\n                placeholder=\"Photo title\"\r\n                defaultValue={isNewForm() ? '' : photo.title}\r\n                onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n                required\r\n              />\r\n              <Form.TextArea\r\n                name=\"description\"\r\n                label=\"Description\"\r\n                placeholder=\"Tell more about the photo...\"\r\n                defaultValue={isNewForm() ? '' : photo.description}\r\n                onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n                required\r\n              />\r\n              <Form.Input\r\n                name=\"url\"\r\n                label=\"URL\"\r\n                placeholder=\"URL of the photo\"\r\n                defaultValue={isNewForm() ? '' : photo.url}\r\n                onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n                required\r\n              />\r\n            </Form>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button positive icon='save' content='Save' onClick={(e) => {handleSubmit(e)}} />\r\n          </Modal.Actions>\r\n        </Modal>\r\n      )\r\n}\r\n\r\nexport default PhotoForm\r\n"]},"metadata":{},"sourceType":"module"}