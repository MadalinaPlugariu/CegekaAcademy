{"ast":null,"code":"var _jsxFileName = \"F:\\\\Cegeka\\\\CegekaAcademy_local\\\\c9\\\\local\\\\CegekaAcademyPC2021ReactAssignment\\\\src\\\\components\\\\Album\\\\AlbumForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Modal, Form, Button, Icon, Message } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AlbumForm = props => {\n  _s();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const emptyAlbum = {\n    id: '',\n    name: '',\n    description: '',\n    tags: [],\n    photoIds: []\n  };\n  const [album, setAlbum] = useState(emptyAlbum);\n  const {\n    photos\n  } = props;\n  const options = photos.map(photo => {\n    return {\n      text: photo.title,\n      value: photo.id,\n      image: {\n        avatar: true,\n        src: photo.url\n      }\n    };\n  });\n\n  const handleInputChange = (name, value) => {\n    const updatedAlbum = { ...album,\n      [name]: value\n    };\n    setAlbum(updatedAlbum);\n  };\n\n  const idFormValid = () => {\n    if (!album) return false;else if (!album.name) return false;else if (!album.tags || album.tags.length === 0) return false;else if (!album.photoIds || album.photoIds.length === 0) return false;\n    return true;\n  };\n\n  const handleSubmit = event => {\n    if (!isFormValid()) {\n      setIsError(true);\n      return;\n    }\n\n    setIsError(false);\n    const {\n      editAlbum,\n      createAlbum,\n      index\n    } = props;\n\n    if (isNewForm()) {\n      createAlbum(album);\n    } else {\n      editAlbum(index, album);\n    }\n\n    closeForm();\n  };\n\n  const showForm = () => {\n    const {\n      albumProp\n    } = props;\n    setIsModalOpen(true);\n    setAlbum(albumProp || emptyAlbum);\n  };\n\n  const closeForm = () => setIsModalOpen(false);\n\n  const isNewForm = () => props.formType === 'New';\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    trigger: /*#__PURE__*/_jsxDEV(Button, {\n      icon: true,\n      onClicl: showForm,\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        name: isNewForm() ? 'plus' : 'edit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 14\n    }, this),\n    closeIcon: true,\n    open: isModalOpen,\n    onClose: closeForm,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      children: isNewForm() ? 'Create Album' : `Edit: ${album.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        error: isError,\n        children: [/*#__PURE__*/_jsxDEV(Message, {\n          error: true,\n          content: \"Fill out all fields and try again...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n          name: \"name\",\n          label: \"Name\",\n          placeholder: \"Album name\",\n          defaultValue: isNewForm() ? '' : album.name,\n          onChange: e => handleInputChange(e.target.name, e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n          name: \"description\",\n          label: \"Description\",\n          placeholder: \"Tell more about the album...\",\n          defaultValue: isNewForm() ? '' : album.description,\n          onChange: e => handleInputChange(e.target.name, e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n          name: \"tags\",\n          label: \"Tags\",\n          placeholder: \"Enter tags separated by '|' vertical bar(pipe) \",\n          defaultValue: e => handleInputChange(e.target.name, e.target.value.split('|')),\n          required: true,\n          icon: \"tags\",\n          iconPosition: \"left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Dropdown, {\n          name: \"photosIds\",\n          label: \"Photos\",\n          placeholder: \"Selectphotos for this album\",\n          defaultValue: isNewForm() ? '' : album.photoIds,\n          onChange: (e, data) => handleInputChange(data.name, data.value),\n          required: true,\n          fluidmultiple: true,\n          selection: true,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        positive: true,\n        icon: \"save\",\n        content: \"Save\",\n        onClick: e => {\n          handleSubmit(e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AlbumForm, \"B1+cMdz5xAioQbztvxN7ArMiKvc=\");\n\n_c = AlbumForm;\nexport default AlbumForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlbumForm\");","map":{"version":3,"sources":["F:/Cegeka/CegekaAcademy_local/c9/local/CegekaAcademyPC2021ReactAssignment/src/components/Album/AlbumForm.tsx"],"names":["useState","Modal","Form","Button","Icon","Message","AlbumForm","props","isModalOpen","setIsModalOpen","isError","setIsError","emptyAlbum","id","name","description","tags","photoIds","album","setAlbum","photos","options","map","photo","text","title","value","image","avatar","src","url","handleInputChange","updatedAlbum","idFormValid","length","handleSubmit","event","isFormValid","editAlbum","createAlbum","index","isNewForm","closeForm","showForm","albumProp","formType","e","target","split","data"],"mappings":"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","sourcesContent":["import {useState } from 'react';\r\nimport { AlbumModel } from '../../models/AlbumModel';\r\nimport { PhotoModel } from '../../models/PhotoModel';\r\nimport { Modal, Form, Button, Icon, Message} from 'semantic-ui-react';\r\n\r\ninterface AlbumFormProps {\r\n    formType: \"New\" | \"Edit\";\r\n    photos: PhotoModel[];\r\n    albumProp? : AlbumModel;\r\n    index: string;\r\n    editAlbum: Function;\r\n    createAlbum: Function;\r\n}\r\n\r\nconst AlbumForm = (props: AlbumFormProps) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n    const emptyAlbum: AlbumModel = {\r\n        id: '',\r\n        name: '',\r\n        description: '',\r\n        tags: [],\r\n        photoIds: [],\r\n    };\r\n    const [album, setAlbum] = useState<AlbumModel>(emptyAlbum);\r\n\r\n    const { photos } = props;\r\n    const options = photos\r\n                    .map(photo => {\r\n                        return {\r\n                            text: photo.title,\r\n                            value: photo.id,\r\n                            image: { avatar: true, src: photo.url }\r\n                        }\r\n                    });\r\n    const handleInputChange = (name: string, value: string | string[] | any)=>{\r\n        const updatedAlbum={\r\n            ...album,\r\n            [name]: value\r\n        }\r\n        setAlbum(updatedAlbum);\r\n    }\r\n    const idFormValid= () =>{\r\n        if(!album) return false;\r\n        else if(!album.name) return false;\r\n        else if(!album.tags || album.tags.length === 0) return false;\r\n        else if(!album.photoIds || album.photoIds.length === 0) return false;\r\n\r\n        return true;\r\n    }\r\n    const handleSubmit = (event: any) => {\r\n        if(!isFormValid()){\r\n            setIsError(true);\r\n            return;\r\n        }\r\n        setIsError(false);\r\n        const {editAlbum, createAlbum, index} = props;\r\n\r\n        if(isNewForm()){\r\n            createAlbum(album);\r\n        }\r\n        else{\r\n            editAlbum(index, album);\r\n        }\r\n        closeForm();\r\n    }\r\n    const showForm = () => {\r\n        const {albumProp} = props;\r\n        setIsModalOpen(true);\r\n        setAlbum(albumProp || emptyAlbum);\r\n    }\r\n    const closeForm = () => setIsModalOpen(false);\r\n    const isNewForm = () => props.formType === 'New';\r\n\r\n    return (\r\n        <Modal\r\n         trigger={\r\n             <Button icon onClicl={showForm}>\r\n                 <Icon name={isNewForm()? 'plus': 'edit'} />\r\n             </Button>\r\n         }\r\n         closeIcon\r\n         open={isModalOpen}\r\n         onClose={closeForm}\r\n        >\r\n            <Modal.Header>\r\n                {isNewForm() ? 'Create Album' : `Edit: ${album.name}`}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <Form error={isError}>\r\n                    <Message\r\n                    error \r\n                    content = 'Fill out all fields and try again...' \r\n                    />\r\n                    <Form.Input \r\n                    name=\"name\"\r\n                    label=\"Name\"\r\n                    placeholder=\"Album name\"\r\n                    defaultValue={isNewForm() ? '' : album.name}\r\n                    onChange= {(e) => handleInputChange(e.target.name, e.target.value)}\r\n                    required\r\n                    />\r\n                    <Form.TextArea\r\n                    name=\"description\"\r\n                    label=\"Description\"\r\n                    placeholder=\"Tell more about the album...\"\r\n                    defaultValue={isNewForm() ? '' : album.description}\r\n                    onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n                    required\r\n                    />\r\n                    <Form.Input \r\n                    name=\"tags\"\r\n                    label=\"Tags\"\r\n                    placeholder=\"Enter tags separated by '|' vertical bar(pipe) \"\r\n                    defaultValue={(e) => handleInputChange(e.target.name, e.target.value.split('|'))}\r\n                    required\r\n                    icon=\"tags\"\r\n                    iconPosition=\"left\"\r\n                    />\r\n                    <Form.Dropdown \r\n                    name=\"photosIds\"\r\n                    label=\"Photos\"\r\n                    placeholder=\"Selectphotos for this album\"\r\n                    defaultValue={isNewForm() ? '' : album.photoIds}\r\n                    onChange={(e, data) => handleInputChange(data.name, data.value)}\r\n                    required\r\n                    fluidmultiple\r\n                    selection\r\n                    options={options}\r\n                    />\r\n                </Form>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button positive icon='save' content='Save' onClick={(e) => {handleSubmit(e)}} />\r\n            </Modal.Actions>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default AlbumForm;"]},"metadata":{},"sourceType":"module"}